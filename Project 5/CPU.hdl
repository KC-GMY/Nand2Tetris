// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Areg);
    Or(a=instruction[15],b=instruction[5],out=selA);
    //A Register
    Register(in=Areg, load=selA, out=outA);
    //D Register
    Register(in=ALUout, load=instruction[4],out=ALUin1);
    //ALU input 2
    Mux16(a=outA,b=inM,sel=instruction[12],out=ALUin2);
    //ALU
    ALU(x=ALUin1, y=ALUin2, zx=instruction[11], nx=instruction[10], 
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=ALUout, zr=ZRout, ng=NGout);
    //outM
    And16(a=ALUout,b=ALUout,out=outM);
    //WriteM
    And(a=instruction[15],b=instruction[3],out=writeM);
    //AddressM
    And16(a=outA,b=outA,out[0..14]=addressM);
    //PC output
    // calc PCload & PCinc - whether to load PC with A reg
    And(a=ZRout, b=instruction[1], out=jeq);    // is zero and jump if zero
    And(a=NGout, b=instruction[2], out=jlt);    // is neg and jump if neg
    Or(a=ZRout, b=NGout, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);            // is positive (not zero and not neg)
    And(a=positive, b=instruction[0], out=jgt); // is pos and jump if pos
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);              // load PC if cond met and jump if cond
    And(a=instruction[15], b=jumpToA, out=PCload); // Only jump if C instruction
    Not(in=PCload, out=PCinc);                  // only inc if not load
    PC(in=outA, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}
